generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  name     String?
  imageUrl String?

  posts    Post[]
  comments Comment[]
  reports  Report[]
}

model Post {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isAnonymous Boolean  @default(false)
  title       String
  content     String
  category    String

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  comments  Comment[]
  reports   Report[]
  images    Image[]
  reactions Reaction[]

  reactionCount Int @default(0) // Nuevo campo para contar las reacciones

  @@index([authorId])
}

model Image {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  @@index([postId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String

  reactions Reaction[]

  reactionCount Int @default(0) // Nuevo campo para contar las reacciones

  @@index([postId])
  @@index([authorId])
}

model Report {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  reason      String
  description String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String

  @@index([postId])
  @@index([authorId])
}

model Reaction {
  id   String       @id @default(cuid())
  type TypeReaction

  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  @@index([postId])
  @@index([commentId])
}

enum TypeReaction {
  like
  love
  haha
  angry
}
