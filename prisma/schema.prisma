generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  name     String?
  imageUrl String?

  posts    Post[]
  comments Comment[]
  reports  Report[]
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isAnonymous Boolean @default(false)
  title       String
  content     String
  category    String

  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  comments Comment[]
  reports  Report[]
  images   Image[]

  @@index([authorId])
}

model Image {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  @@index([postId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String

  @@index([postId])
  @@index([authorId])
}

model Report {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  reason      String
  description String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId   String

  @@index([postId])
  @@index([authorId])
}
